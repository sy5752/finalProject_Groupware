package kr.or.ddit.groupware.contoller;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.or.ddit.common.model.PageVo;
import kr.or.ddit.groupware.model.AttFileVo;
import kr.or.ddit.groupware.model.BoardPostVo;
import kr.or.ddit.groupware.model.BoardVo;
import kr.or.ddit.groupware.service.BoardService;
import kr.or.ddit.groupware.service.EmpService;
import kr.or.ddit.util.FileUtil;

@RequestMapping("board")
@Controller
public class BoardController {
private static final Logger logger = LoggerFactory.getLogger(BoardController.class);

	@Resource(name = "boardService")
	private BoardService boardService;
	
	@Resource(name="empService")
	private EmpService empService;
	
	
	@RequestMapping(path = "boardmain", method = RequestMethod.GET)
	public String main(Model model) {
		
		List<BoardVo> board = boardService.selectBoard();
		
		model.addAttribute("boardList", board);
		
		return "tiles.board.boardMain";
	}
	
	@RequestMapping(path = "mainEmployee", method = RequestMethod.GET)
	public String mainEmployee(Model model) {
		
		List<BoardVo> board = boardService.selectBoard();
		
		model.addAttribute("boardList", board);
		
		return "tiles.board.mainEmployee";
	}
	
	
	

	@RequestMapping(path = "boardCreate", method = {RequestMethod.GET, RequestMethod.POST})
	public String boardCreate(int emp_no, String bor_nm, String active) {
		
		int ad = 2;
		
		if(active.equals("activation")) {
			ad = 1;
		}
				
		BoardVo board = new BoardVo();
		
		board.setAct_cd(ad);
		board.setBor_nm(bor_nm);
		board.setEmp_no(emp_no);
		logger.debug("board:{}",board);
		
		boardService.insertBoard(board);
		
		return "redirect:/board/boardmain";
	
	}
	
	
	  @RequestMapping(path = "boardModify", method = {RequestMethod.GET, RequestMethod.POST})
	  public String boardModify(String bor_nm, String active){
	  
	  int ad = 2;
	  
	  if(active.equals("activation")) { 
		  ad = 1; 
	 }
	  
	  BoardVo board = new BoardVo();
	  
	  board.setBor_nm(bor_nm); 
	  board.setAct_cd(ad);
	  
	  boardService.updateBoard(board);
	  
	  return "redirect:/board/boardmain";
	  
	  }
	  
	  @RequestMapping(path="insertPost", method = RequestMethod.GET) 
	  public String insertBoard(Model model) {
		  logger.debug("get:{}", "get");
		  model.addAttribute("boardList", boardService.selectBoard());
		  return "tiles.board.insertPost"; 
	 
	  }
	  @RequestMapping(path="boardView", method = RequestMethod.GET) 
	  public String boardView() {
		  
		  return "tiles.board.boardView"; 
		  
	  }

	@RequestMapping(path = "insertPost", method =  RequestMethod.POST)
	public synchronized String insertPost(int bor_no, int emp_no, String title, String cont, MultipartHttpServletRequest file) {
		logger.debug("post{}", "post");
		
		BoardPostVo post = new BoardPostVo();
		
		
		post.setBor_no(bor_no);
		post.setEmp_no(emp_no);
		post.setTitle(title);
		post.setCont(cont);
		
		logger.debug("postVo:{}", post);
		
		
		int insertPost = boardService.insertPost(post);
		logger.debug("post:{}", post);		
//		if(insertPost == 1) {
//			
//			List<MultipartFile> files = file.getFiles("addFile");
//			
//			AttFileVo attFileVo = new AttFileVo();
//			attFileVo.setFile_no(file_no);
//			
//			BoardPostFileVo vo = new BoardPostFileVo();
//			vo.setPost_no(post_no);
//			
//			for(MultipartFile multFile:files) {
//				if(!multFile.getOriginalFilename().equals("")) {
//					try {
//						String fileExtension = FileUtil.getFileExtension(multFile.getOriginalFilename());
//						String fileRoute = "D:/upload/"+ UUID.randomUUID().toString()+fileExtension;
//						String fileName = multFile.getOriginalFilename();
//						multFile.transferTo(new File(fileRoute));
//						attFileVo.setFile_nm(fileName);
//						attFileVo.setFile_route(fileRoute);
//						vo.setFile_no(file_no);
//						boardService.insertFile(vo);
//						
//					} catch (IllegalStateException | IOException e) {
//						e.printStackTrace();
//					}
//				}
//			} 
		if(insertPost==1) {
			int post_no = boardService.maxPostNo();
			logger.debug("insertPost{}", insertPost);	
			return "redirect:/board/postDetail?post_no="+post_no;
		}else {
			return "board/insertPost";
		
		}
	}
	
	@RequestMapping(path = "postDetail", method = RequestMethod.GET)
	public String postDetail(int post_no,  Model model) {
		
		BoardPostVo boardPost = new BoardPostVo();
		
		boardPost.setPost_no(post_no);
		
		BoardPostVo boardPostVo = boardService.postDetail(boardPost);
		List<BoardVo> boardVo = boardService.selectBoard();
		
		
		model.addAttribute("boardPost", boardPostVo);
		model.addAttribute("boardVo", boardVo);
		
		
		return "tiles.board.postDetail";
	}
	
	@RequestMapping(path = "postListView", method = RequestMethod.GET)
	public String postListView(PageVo pageVo, int bor_no, Model model) {
		
		Map<String, Object> map = boardService.postListView(pageVo);
	
		List<BoardPostVo> postList = (List<BoardPostVo>)map.get("postList");
		
		int postCnt = (int)map.get("postCnt");
		int pagination = (int)Math.ceil((double) postCnt / pageVo.getPageSize());
		
		model.addAttribute("postList", postList);
		model.addAttribute("pagination", pagination); 
//		model.addAttribute("boardListView", boardListView);
		model.addAttribute("pageVo", pageVo);
		
		return "tiles.board.postList";
		
	}
	

	@RequestMapping(path = "modifyPost", method = RequestMethod.GET)
	public String modifyPost(int emp_no, int post_no, Model model) {
		
		BoardPostVo vo = new BoardPostVo();
		vo.setPost_no(post_no);
		vo.setEmp_no(emp_no);
		logger.debug("get:{}", "get");
		
		BoardPostVo boardPost =  boardService.selectPost(vo);
		
		model.addAttribute("boardPost", boardPost);
	
		
		return "tiles.board.modifyPost";
	}
	
	@RequestMapping(path = "modifyPost", method = RequestMethod.POST)
	public String modifyPost(BoardPostVo boardPostVo,  Model model, MultipartHttpServletRequest multiFile) {

		int updateCnt = boardService.modifyPost(boardPostVo);
		
		logger.debug("post:{}", "post");
		if(updateCnt == 1) {
//			List<MultipartFile> files = multiFile.getFiles("addFile");
//			
//			FileVo vo = new FileVo();
//			vo.setBor_no(boardno);
//			vo.setPost_no(postno);
//			vo.setUser_id(userid);
//			
//			for(MultipartFile file:files) {
//				if(!file.getOriginalFilename().equals("")) {
//					try {
//						String fileExtension = FileUtil.getFileExtension(file.getOriginalFilename());
//						String realFileName = "D:/upload/"+ UUID.randomUUID().toString()+fileExtension;
//						String fileName = file.getOriginalFilename();
//						file.transferTo(new File(realFileName));
//						vo.setFile_nm(fileName);
//						vo.setRead_file_name(realFileName);
//						boardService.insertFile(vo);
//						
//					} catch (IllegalStateException | IOException e) {
//						e.printStackTrace();
//					}
//				
//				}
//			}
//			
//			return "redirect:/board/modifyPost?post_no="+post_no;
//		}else {
//			//doGet(req, resp);
//			return "board/boardModify";
//		}
			int post_no = boardPostVo.getPost_no();
			return "redirect:/board/postDetail?post_no="+post_no;
	
	}else {
		return "board/modifyPost";
	}
}
		@RequestMapping(path = "deletePost", method = RequestMethod.POST)
		public String deletePost(int post_no) {
			
			BoardPostVo boardPost = new BoardPostVo();
			
			boardPost.setPost_no(post_no);
			
			int updateCnt = boardService.deletePost(boardPost);
			
			if(updateCnt == 1) {
				return "redirect:/board/postListView?post_no="+post_no;
				
			}else {
				return "redirect:/board/postDetail?post_no="+post_no;
			}
			
			
	
	

//	
//	@RequestMapping(path = "deleteFile", method = RequestMethod.POST)
//	public String deleteFile(int att_no, Model model) {
//		
//		FileVo vo = new FileVo();
//		vo.setAtt_no(att_no);
//		
//		int deleteCnt = boardService.deleteFile(vo);
//		model.addAttribute("deleteCnt", deleteCnt);
//		
//		
//		return "jsonView";
//	}
//	
//		@RequestMapping(path = "selectBoardView", method = RequestMethod.GET)
//		public String selectBoardView(String userid, int boardno, int postno, Model model) {
//			
//			BoardListVo boardList = new BoardListVo();
//			
//			boardList.setUser_id(userid);
//			boardList.setBor_no(boardno);
//			boardList.setPost_no(postno);
//			
//			FileVo vo =  new FileVo();
//			vo.setBor_no(boardno);
//			vo.setPost_no(postno);
//			vo.setUser_id(userid);
//			
//			List<FileVo> ListVo = boardService.selectFile(vo);
//			model.addAttribute("FileList", ListVo);
//			
//			BoardListVo boardListVo = boardService.selectBoard(boardList);
//			List<BoardInfoVo> board = boardService.selectBoardInfo();
//			
//			model.addAttribute("boardList", board);
//			
//			model.addAttribute("boardListVo", boardListVo);
//			
//			PostCommVo postCommVo = new PostCommVo();
//			
//			postCommVo.setBor_no(boardno);
//			postCommVo.setPost_no(postno); //파라미터에 담아주려고(파라미터는 하나만 보낼수있어서)
//			postCommVo.setUser_id(userid);
//					
//			List<PostCommVo> postCommList  = boardService.selectReply(postCommVo);
//			
//			model.addAttribute("postCommList", postCommList);
//			
//			return "board/selectBoard";
//		
//	}

//		@RequestMapping("addFileDownload")
//		public void addFileDownload(int att_no, HttpServletResponse response) { 
//			
//			FileVo vo = boardService.selectFileDownload(att_no);
//			
//			// d:\\upload\\sally.png
//			String realFilename = vo.getRead_file_name();
//			String filename = vo.getFile_nm(); 
//
//			response.setHeader("Content-Disposition", "attachement; filename="+ filename);
////			response.setHeader("Content-Disposition", "attacment; filename=" + filename);
//					
//			ServletOutputStream sos; 
//			try {
//				
//				sos = response.getOutputStream();
//				FileInputStream fis = new FileInputStream(new File(realFilename));
//				
//				byte[] buf = new byte[512];
//				
//				while(fis.read(buf) != -1) { // 모든 파일을 읽고 다읽으면 while문을 빠져나감 : -1이 되면 읽을 파일이 없는 것 
//					sos.write(buf);
//				}
//				
//				fis.close();
//				sos.close();
//
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
//		}
		

//		@RequestMapping(path = "deleteBoard", method = RequestMethod.POST)
//		public String deleteBoard(int boardno, int postno, String userid) {
//			
//			
//			BoardListVo boardList = new BoardListVo();
//			
//			boardList.setBor_no(boardno);
//			boardList.setPost_no(postno);
//			boardList.setUser_id(userid);
//			
//			int updateCnt = boardService.deleteBoard(boardList);
//			
//			if(updateCnt == 1) {
//				return "redirect:/board/boardListView?boardno="+boardno;
//			}else {
//				return "redirect:/board/selectBoardView?boardno="+boardno+"&userid="+userid+"&postno="+postno;
//			}
//		
//		}
//		
//		@RequestMapping(path = "commBoard", method = RequestMethod.GET)
//		public String commBoard(String userid, int boardno, int postno, Model model) {
//			
//			
//			BoardListVo boardList = new BoardListVo();
//			
//			boardList.setUser_id(userid);
//			boardList.setBor_no(boardno);
//			boardList.setPost_no(postno);
//			
//			BoardListVo boardListVo = boardService.selectBoard(boardList);
//			List<BoardInfoVo> board = boardService.selectBoardInfo();
//			
//			model.addAttribute("boardList", board);
//			model.addAttribute("boardListVo", boardListVo);
//			
//			return "board/commBoard";
//		
//		}
//		@RequestMapping(path = "commBoard", method = RequestMethod.POST)
//		public String commBoard(String userid, String title, String cont, String commuserid, int commborno, int commpostno) {
//			
//			
//			BoardListVo boardVo = new BoardListVo();
//			
//			boardVo.setBor_no(commborno);
//			boardVo.setUser_id(userid);
//			boardVo.setTitle(title);
//			boardVo.setCont(cont);
//
//			//답글의 대상 게시글
//			boardVo.setBor_c_nm(commborno);
//			boardVo.setPost_c_no(commpostno);
//			boardVo.setRep_user_id(commuserid);
//			
//			int insertCnt = boardService.insertComm(boardVo);
//			
//			if(insertCnt == 1) {
//				int postMaxNo = boardService.maxPostNo();
//				return "redirect:/board/selectBoardView?boardno="+commborno+"&userid="+userid+"&postno="+postMaxNo;
//			}else {
//				return "redirect:/board/commBoard?userid="+userid+"&boardno="+commborno+"&postno="+commpostno;
//				
//			}
//		}
//		@RequestMapping(path = "replyBoard", method = RequestMethod.POST)
//		public String replyBoard(String com_user_id, int bor_no, int post_no, String user_id, String replycont) {
//			
//			replycont = replycont.replaceAll("\n", "<br>");
//			
//			PostCommVo vo = new PostCommVo();
//			
//			vo.setCom_user_id(com_user_id);
//			vo.setBor_no(bor_no);
//			vo.setPost_no(post_no);
//			vo.setUser_id(user_id);
//			vo.setCom_con(replycont);
//			
//			boardService.insertReply(vo);
//			
//			return "redirect:/board/selectBoardView?userid="+user_id+"&boardno="+bor_no+"&postno="+post_no;
//		}
//		@RequestMapping(path = "deleteReply", method = RequestMethod.POST)
//		public String deleteReply(int com_no, String com_user_id, int bor_no, int post_no, String user_id) {
//			
//			
//			PostCommVo vo = new PostCommVo();
//			
//			vo.setCom_no(com_no);
//			vo.setCom_user_id(com_user_id);
//			
//			int updateCnt = boardService.deleteReply(vo);
//			
//			return "redirect:/board/selectBoardView?boardno="+bor_no+"&postno="+post_no+"&userid="+user_id;
//			
//		}
//		
		
	}
}
