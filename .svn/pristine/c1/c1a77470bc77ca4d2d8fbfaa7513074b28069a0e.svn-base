package kr.or.ddit.groupware.contoller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Workbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.model.PageVo;
import kr.or.ddit.groupware.model.EmpVo;
import kr.or.ddit.groupware.model.JobVo;
import kr.or.ddit.groupware.model.OnOffVo;
import kr.or.ddit.groupware.service.EmpService;
import kr.or.ddit.groupware.service.OnOffService;
import kr.or.ddit.groupware.util.FileUtil;
import net.sf.jxls.exception.ParsePropertyException;
import net.sf.jxls.transformer.XLSTransformer;

@Controller
@RequestMapping("empController")
public class EmpController {

	private static final Logger logger = LoggerFactory.getLogger(EmpController.class);

	
	@Resource(name="empService")
	private EmpService empService;
	
	@Resource(name="onoffService")
	private OnOffService onoffService;
	
	//로그인화면
	@RequestMapping("loginView")
	public String loginView() {
		return "admin/login";
	}
	
	//로그인
	@RequestMapping(path="loginProcess", method = RequestMethod.POST)
	public String loginProcess(EmpVo empVo, HttpSession session, RedirectAttributes ra, Model model, PageVo pageVo) {
		
		EmpVo dbUser = empService.selectUser(empVo.getEmp_id());
		
		if(dbUser != null && empVo.getPass().equals(dbUser.getPass())) {
			session.setAttribute("S_USER", dbUser);
			model.addAttribute("userList", empService.selectPagingUser(pageVo));
			return "redirect:/test/main";
		}else {	
			return "redirect:/empController/loginView";
		}
	}
	
	//인사정보 리스트 , chart api
	@RequestMapping("empinformation")
	public String empinformation(PageVo pageVo, Model model) {
	
		Map<String, Object> map = empService.selectPagingUser(pageVo);
		
		
		List<EmpVo> userList = (List<EmpVo>)map.get("userList");
		int userCnt = (int)map.get("userCnt");
	    int pagination = (int)Math.ceil((double)userCnt/pageVo.getPageSize());
			  
		model.addAttribute("userList", userList);
		model.addAttribute("pagination", pagination);
		model.addAttribute("pageVo", pageVo);
		
		//부서별 chart(부서명,count)
		model.addAttribute("chartList", empService.selectChartDept());
		//직급별 chart(직급명,count)
		model.addAttribute("chartList2", empService.selectChartPo());
		//성별 chart(성별,count)
		model.addAttribute("chartList3", empService.selectChartGender());
		//재직별 chart(재직상태,count)
		model.addAttribute("chartList4", empService.selectChartServe());
		
		return "tiles.admin.userlist";	
	}
	
	//인사정보 페이징AjaxHtml
	@RequestMapping("pagingUserAjaxHtml")
	public String pagingUserAjaxHtml(@RequestParam(defaultValue = "1") int page,
									@RequestParam(defaultValue = "10") int pageSize, String keyword,
									Model model) {
		
		PageVo pageVo = new PageVo(page, pageSize);
		pageVo.setKeyword(keyword);
		logger.debug("keyword : {}",keyword);

		if(pageVo.getKeyword() != null) {
			model.addAllAttributes(empService.searchPagingEmp(pageVo));
		}else {
			model.addAllAttributes(empService.selectPagingUser(pageVo));

		}
		return "/admin/pagingUserAjaxHtml";
	}
	
	//인사정보 상세조회Ajax
	@RequestMapping("detailUserAjax")
	public String detailUserAjax(int emp_no, Model model) {
		
		logger.debug("emp_no : {}", emp_no);
		
		EmpVo empList = new EmpVo();
		empList.setEmp_no(emp_no);
		
		EmpVo detailUser = empService.detailUserAjax(empList);
		
		logger.debug("empVo : {}", detailUser);
		
		model.addAttribute("detailUser", detailUser);
		
		return "/admin/detailUserAjaxHtml";
	}
	
	//사원정보 수정페이지이동
	@RequestMapping(path = "userModifyAjax", method = RequestMethod.GET)
	public String userModifyAjax(EmpVo empVo, int emp_no, Model model){
		
		EmpVo empList = new EmpVo();
		empList.setEmp_no(emp_no);
		
		EmpVo detailUser = empService.detailUserAjax(empList);
		
		logger.debug("empVo : {}", detailUser);
		
		model.addAttribute("detailUser", detailUser);
		return "/admin/userModifyAjaxHtml";
	}
	
	//사원정보수정 @RequestParam(value="job_cd[]") List<Integer> vals,
	@RequestMapping(path = "userModifyAjax", method = RequestMethod.POST)
	public String userModifyAjax(EmpVo empVo,JobVo jobVo, int emp_no, Model model, MultipartHttpServletRequest request) {

		logger.debug("job:{}", empVo.getJob_cd());
		
		List<MultipartFile> fileList = request.getFiles("profile");
		MultipartFile profile = fileList.get(0);
		
		logger.debug("profile :{}", profile);
		if(profile.getSize() == 0) {
		        empVo.setProfile_nm(empService.detailUserAjax(empVo).getProfile_nm());
		        empVo.setProfile_route(empService.detailUserAjax(empVo).getProfile_route());
		}else {
			try {
				empVo.setProfile_nm(profile.getOriginalFilename());
				String fileExtension = FileUtil.getFileExtension(profile.getOriginalFilename());
				String realFileName = "d:/upload/"+UUID.randomUUID().toString()+fileExtension;
				empVo.setProfile_route(realFileName);
				profile.transferTo(new File(realFileName));
			} catch (IllegalStateException | IOException e1) {
				e1.printStackTrace();
			}
		}
		logger.debug("empVo1 : {}",empVo);
		//사원정보 수정(직무삭제)
		int deleteCnt = 0;
		try {
			deleteCnt = empService.modifyDelete(emp_no);
		} catch (Exception e) {
			deleteCnt = -1;
			e.printStackTrace();
		}
		//사원정보 수정(직무등록)
		logger.debug("empVo2 : {}",empVo);
		jobVo.setEmp_no(emp_no);
		int insertCnt = 0;
		for(int i=0; i<empVo.getJob_cd().size(); i++) {
			
			jobVo.setJob_cd(empVo.getJob_cd().get(i));
			try {
				insertCnt = empService.modifyInsert(jobVo);
			} catch (Exception e) {
				insertCnt = 0;
				e.printStackTrace();
			}
		}
		
		logger.debug("empVo3 : {}",empVo);
		
		//사원정보 수정업데이트
		int updatCnt = 0;
		try {
			updatCnt = empService.modifyUserAjax(empVo);
		}catch (Exception e) {
			updatCnt = 0;
			e.printStackTrace();
		}
//		&& deleteCnt == 1 && insertCnt == 1 
		if(updatCnt == 1 && deleteCnt != -1 && insertCnt != 0) {
			model.addAttribute("detailUser", empService.detailUserAjax(empVo));
			return "/admin/detailUserAjaxHtml";
		}else {	
			model.addAttribute("detailUser", empService.detailUserAjax(empVo));
			return "/admin/userModifyAjaxHtml";
		}
		
	}
	
	//엑셀 다운로드
	public void download(HttpServletRequest request, HttpServletResponse response, Map<String, Object> bean,
			String fileName, String templateFile, String string) throws ParsePropertyException, InvalidFormatException {

		// 받아오는 매개변수 bean는 디비에서 뽑아온 데이터
        // fileName 은 다운로드 받을때 지정되는 파일명
        // templateFile 는 템플릿 엑셀 파일명이다.
        
        // tempPath는 템플릿 엑셀파일이 들어가는 경로를 넣어 준다.
		String tempPath = request.getSession().getServletContext().getRealPath("/WEB-INF/excel");

		// 별도로 다운로드 만들기 귀찮으까 이런식으로 만들어서 바로 엑셀 생성후 다운 받게 
		try {

			InputStream is = new BufferedInputStream(new FileInputStream(tempPath + "\\" + templateFile));
			XLSTransformer xls = new XLSTransformer();

			Workbook workbook = (Workbook) xls.transformXLS(is, bean);

			response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + ".xlsx\"");

			OutputStream os = response.getOutputStream();

			workbook.write(os);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(value = "downExcel")
    public void listExcel(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception, Exception {

		// 그냥 평소에 마이바티스에서 데이터 뽑는 방법으로 데이터를 가져온다.
		List<EmpVo> dataList = (List<EmpVo>) empService.selectAllEmp();
        
		// 받은 데이터를 맵에 담는다.
        Map<String, Object> beans = new HashMap<String, Object>();
        beans.put("dataList", dataList);
        
        // 엑셀 다운로드 메소드가 담겨 있는 객체
        EmpController me = new EmpController();

        me.download(request, response, beans, "test", "templateFile.xlsx", "");
    }
	
	//프로필
	@RequestMapping("profile")
	public void profile(HttpServletResponse resp, String emp_id, HttpServletRequest req) {
		resp.setContentType("image");
		
		// userid 파라미터를 이용하여 userService 객체를 통해 사용자의 사잔 파일 이름을 획득
		// 파일 입출력을 통해 사진을 읽어들여 resp객체의 outputStream으로 응답 생성
		
		EmpVo empVo = empService.selectUser(emp_id);
		
		String path = "";
		if(empVo.getProfile_route() == null) {
			//	/webapp/image 경로..
			path = req.getServletContext().getRealPath("/image/unknown.png");
		}else {
			path = empVo.getProfile_route();
		}
		
		logger.debug("path : {}", path);
		
		FileInputStream fis;
		
		try {
			fis = new FileInputStream(path);
			ServletOutputStream sos = resp.getOutputStream();
			
			byte[] buff = new byte[512];
			
			while(fis.read(buff) != -1) {
				sos.write(buff);
			}
			
			fis.close();
			sos.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping("profileDownload")
	public void profileDownload(String emp_id, HttpServletRequest req, HttpServletResponse resp) {
		
		EmpVo empVo = empService.selectUser(emp_id);

		String path = "";
		String filename = "";
		if(empVo.getProfile_route() == null) {
			//	/webapp/image 경로..
			path = req.getServletContext().getRealPath("/image/unknown.png");
			filename = "unknown.png";
		}else {
			path = empVo.getProfile_route();
			filename = empVo.getProfile_nm();
		}
		
		resp.setHeader("Content-Disposition", "attacment; filename=" + filename);
		
		logger.debug("path : {}", path);
		
		FileInputStream fis;
		try {
			fis = new FileInputStream(path);
			ServletOutputStream sos = resp.getOutputStream();
			
			byte[] buff = new byte[512];
			
			while(fis.read(buff) != -1) {
				sos.write(buff);
			}
			
			fis.close();
			sos.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 근태정보 jsp로 이동
		@RequestMapping("emponoff")
		public String emponoff(int emp_no, String emp_id, PageVo pageVo, Model model) {
				
			logger.debug("emponoff ====================================== \n");
			logger.debug("emp_id : {}", emp_id);
			logger.debug("emp_no : {}", emp_no);
			
			Map<String, Object> map = onoffService.selectOnOffPaging(pageVo);
			int pagination = (int) map.get("pagination");
			
			int attendCnt = onoffService.checkAttendCnt(emp_no);
			logger.debug("attendCnt : {}", attendCnt);
			
			OnOffVo onVo = new OnOffVo(); 
			OnOffVo onVo1 = new OnOffVo(); 		
			
			try {
				onVo = onoffService.checkOffTime(emp_no);
				onVo1 = onoffService.selectWorktime(emp_no);
				model.addAttribute("offTime", onVo.getOffwork_time());
				model.addAttribute("workTime", onVo1.getAttend_time());
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			if(attendCnt == 0) {
				model.addAttribute("attendCnt", 0);
			}else {
				model.addAttribute("attendCnt", 1);
			}
			
			model.addAttribute("emp_no", emp_no);
			model.addAttribute("emp_id", emp_id);
			model.addAttribute("pagination", pagination);
			model.addAttribute("pageVo", pageVo);
			
			return "tiles.admin.onofflist";
		}
		
		// 근태 페이징 리스트
		@RequestMapping(value="pagingOnOffAjaxHtml")		
		public String pagingOnOffAjaxHtml(@RequestParam(defaultValue = "1") int page,
										  @RequestParam(defaultValue = "10") int pageSize,
										  int emp_no, String emp_id,Model model) {
			
			Map<String, Object> map = new HashMap<>();
			
			map.put("page", page);
			map.put("pageSize", pageSize);
			map.put("emp_no", emp_no);
			
			PageVo pageVo = new PageVo(page, pageSize);
			
			int attendCnt = onoffService.checkAttendCnt(emp_no);
			
			if(attendCnt == 0) {
				model.addAttribute("attendCnt", 0);
			}else {
				model.addAttribute("attendCnt", 1);
			}
			
			model.addAllAttributes(onoffService.selectOnOffDetailPaging(map));
			model.addAllAttributes(onoffService.selectOnOffPaging(pageVo));
			return "ajax/pagingOnOffAjaxHtml";
		}
		
		// 근태 상세조회 
		@RequestMapping("onoffDetail")
	    public String OnOffDetail(String emp_id, int emp_no, Model model) {
			
			logger.debug("OnOffDetail() ==================== ");
			
			PageVo pageVo = new PageVo(1, 10);
			
			Map<String, Object> map1 = new HashMap<>();
			map1.put("emp_no", emp_no);
			map1.put("page", 1);
			map1.put("pageSize", 10);
			
			Map<String, Object> map = onoffService.selectOnOffDetailPaging(map1);
			List<OnOffVo> ononffdetaillist = (List<OnOffVo>)map.get("onoffDetaillist");
			
			int pagination = (int)map.get("pagination1");

			model.addAttribute("onoffVo", onoffService.selectonoff(emp_no));
			model.addAttribute("onoffDetaillist", ononffdetaillist); 
			model.addAttribute("pageVo1", pageVo);
			model.addAttribute("pagination1", pagination);
			model.addAttribute("emp_no", emp_no);
			
			return "admin/onoffDetail";
	    }
		
		// 근태 상제조회 페이징 리스트
		@RequestMapping("pagingOnOffDetailAjaxHtml")
		public String pagingOnOffDetailAjaxHtml(@RequestParam(defaultValue = "1") int page,
										  @RequestParam(defaultValue = "10") int pageSize,
										  int emp_no,
										  Model model) {
				
			PageVo pageVo = new PageVo(page, pageSize);
			
			Map<String, Object> map = new HashMap<>();
			map.put("page", page);
			map.put("pageSize", pageSize);
			map.put("emp_no", emp_no);
			map.put("pageVo", pageVo);
			
			model.addAllAttributes(onoffService.selectOnOffDetailPaging(map));
			return "ajax/pagingOnOffDetailAjaxHtml";
		}
		
		// 근태 엑셀 다운
		@RequestMapping("onofflistExcel")
	    public void onofflistExcel(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) 
	    		throws Exception, Exception {
			
			// 그냥 평소에 마이바티스에서 데이터 뽑는 방법으로 데이터를 가져온다.
			List<OnOffVo> onoffList = onoffService.selectOnOfflist();
	        
			// 받은 데이터를 맵에 담는다.
	        Map<String, Object> beans = new HashMap<String, Object>();
	        beans.put("onoffList", onoffList);
	        
	        // 엑셀 다운로드 메소드가 담겨 있는 객체
	        EmpController me = new EmpController();
	        
	        me.download(request, response, beans, "전사근태리스트", "onoffTemplate.xlsx", "");

	    }
		
		// 근태상세 엑셀다운
		@RequestMapping("onoffDetailExcel")
	    public void onoffDetailExcel(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap, int emp_no) 
	    		throws Exception, Exception {
			
			logger.debug("emp_no : {}", emp_no);
			
			// 그냥 평소에 마이바티스에서 데이터 뽑는 방법으로 데이터를 가져온다.
			List<OnOffVo> onoffList = onoffService.selectOnOffDetaillist(emp_no);
	        
			// 받은 데이터를 맵에 담는다.
	        Map<String, Object> beans = new HashMap<String, Object>();
	        beans.put("onoffList", onoffList);
	        
	        // 엑셀 다운로드 메소드가 담겨 있는 객체
	        EmpController me = new EmpController();
	        
	        me.download(request, response, beans, "personalOnOff", "onoffTemplate.xlsx", "");

	    }
		
		// 연차 리스트 페이징 
		@RequestMapping("empVacation")
		public String empVacation() {
			
			
			
			return "";
		}
		

	

	
}
